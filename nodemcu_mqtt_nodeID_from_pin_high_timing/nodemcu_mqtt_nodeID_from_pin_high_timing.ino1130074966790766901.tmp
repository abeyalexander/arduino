#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Keypad.h>


#define read_pin D5
#define sense_pin D0
#define relay_pin_1 D1
#define relay_pin_2 D2

// Update these with values suitable for your network.

const char* ssid = "KabaniTech";
const char* password = "makerspace";
const char* mqtt_server = "abraham-pc";
String node_ip = "null", node_id = "null";
long tick = 0;
boolean relay_state = false, publish_flag = false;

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[4];
int value = 0;
String msg_received = "";
boolean sense_pin_current = 0, sense_pin_prev = 0;

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  pinMode(sense_pin, INPUT);
  pinMode(read_pin, INPUT);
  pinMode(relay_pin_1, OUTPUT);
  pinMode(relay_pin_2, OUTPUT);
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  node_ip = (String)WiFi.localIP();
  node_id = node_id.substring(11, 14);
  int node_id_count = 0;
  while (node_id == "null")
  {
    if (millis() - tick > 1000 && digitalRead(read_pin))
    {
      digitalWrite(BUILTIN_LED, LOW);
      delay(200);
      digitalWrite(BUILTIN_LED, HIGH);
      node_id_count += 1;
      node_id = (String)node_id_count;
      tick = millis();
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    msg_received = msg_received + (String)payload[i];
  }
  Serial.println(msg_received);

  // Switch on the LED if an 1 was received as first character
  if (msg_received == "1") {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is acive low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected())
  {
    String temp = "client_id_" + node_ip;
    char client_id[10];
    temp.toCharArray(client_id, 10);
    if (client.connect(client_id))
    {}
    else
    {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
void loop() 
{
  if (!client.connected()) 
  {
    reconnect();
  }
  client.loop();
  
  sense_value_current = digitalRead(D0);
  
  if ((sense_value_prev ^ sense_value_current))
  {
    digitalWrite(relay_pin_1, relay_state);
    digitalWrite(relay_pin_2, !relay_state);
    relay_state = !relay_state;
    if (sense_value_current)
      publish_flag = true;
    sense_value_prev = sensor_value_current;
  }

  if (publish_flag)
  {
    char message_char_array[10];
    node_id.toCharArray(message_char_array, 10);
    client.publish("outTopic", message_char_array);
    Serial.println("Message published!!!: " + (String)message_char_array);
    publish_flag = false;
  }
}
